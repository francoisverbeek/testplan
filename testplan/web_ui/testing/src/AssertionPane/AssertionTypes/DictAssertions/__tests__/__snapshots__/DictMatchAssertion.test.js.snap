// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DictMatchAssertion shallow renders the correct HTML structure 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DictMatchAssertion
    assertion={
        Object {
            "actual_description": null,
            "category": "DEFAULT",
            "comparison": Array [
              Array [
                0,
                "foo",
                "Passed",
                Array [
                  "int",
                  "1",
                ],
                Array [
                  "int",
                  "1",
                ],
              ],
              Array [
                0,
                "bar",
                "Failed",
                Array [
                  "int",
                  "2",
                ],
                Array [
                  "int",
                  "5",
                ],
              ],
              Array [
                0,
                "extra-key",
                "Failed",
                Array [
                  null,
                  "ABSENT",
                ],
                Array [
                  "int",
                  "10",
                ],
              ],
            ],
            "description": "Simple dict match",
            "exclude_keys": null,
            "expected_description": null,
            "include_keys": null,
            "line_no": 524,
            "machine_time": "2019-02-12T17:41:43.295236+00:00",
            "meta_type": "assertion",
            "passed": false,
            "type": "DictMatch",
            "utc_time": "2019-02-12T17:41:43.295231+00:00",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "buttonGroup": <SortButtonGroup
        defaultSortType={3}
        flattenedDict={
                Array [
                        Array [
                          0,
                          "foo",
                          "Passed",
                          Array [
                            "int",
                            "1",
                          ],
                          Array [
                            "int",
                            "1",
                          ],
                        ],
                        Array [
                          0,
                          "bar",
                          "Failed",
                          Array [
                            "int",
                            "2",
                          ],
                          Array [
                            "int",
                            "5",
                          ],
                        ],
                        Array [
                          0,
                          "extra-key",
                          "Failed",
                          Array [
                            null,
                            "ABSENT",
                          ],
                          Array [
                            "int",
                            "10",
                          ],
                        ],
                      ]
        }
        setRowData={[Function]}
        sortTypeList={
                Array [
                        1,
                        2,
                        3,
                        4,
                      ]
        }
/>,
      "columnDefs": Array [
        Object {
          "field": "descriptor",
          "headerName": "Descriptor",
          "hide": true,
        },
        Object {
          "cellRendererFramework": [Function],
          "cellStyle": [Function],
          "field": "key",
          "headerName": "Key",
          "pinned": "left",
          "suppressMovable": true,
        },
        Object {
          "cellRendererFramework": [Function],
          "cellStyle": [Function],
          "field": "expected",
          "headerName": "Expected",
        },
        Object {
          "cellRendererFramework": [Function],
          "cellStyle": [Function],
          "field": "value",
          "headerName": "Value",
        },
      ],
      "rowData": Array [
        Object {
          "descriptor": Object {
            "indent": 0,
            "isEmptyLine": false,
            "isListKey": false,
            "lineNo": 524,
            "status": "Failed",
          },
          "expected": Object {
            "type": "int",
            "value": "5",
          },
          "key": Object {
            "type": "key",
            "value": "bar",
          },
          "value": Object {
            "type": "int",
            "value": "2",
          },
        },
        Object {
          "descriptor": Object {
            "indent": 0,
            "isEmptyLine": false,
            "isListKey": false,
            "lineNo": 524,
            "status": "Failed",
          },
          "expected": Object {
            "type": "int",
            "value": "10",
          },
          "key": Object {
            "type": "key",
            "value": "extra-key",
          },
          "value": Object {
            "type": null,
            "value": "ABSENT",
          },
        },
        Object {
          "descriptor": Object {
            "indent": 0,
            "isEmptyLine": false,
            "isListKey": undefined,
            "lineNo": 524,
            "status": "Passed",
          },
          "expected": Object {
            "type": "int",
            "value": "1",
          },
          "key": Object {
            "type": "key",
            "value": "foo",
          },
          "value": Object {
            "type": "int",
            "value": "1",
          },
        },
      ],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "buttonGroup": <SortButtonGroup
          defaultSortType={3}
          flattenedDict={
                    Array [
                              Array [
                                0,
                                "foo",
                                "Passed",
                                Array [
                                  "int",
                                  "1",
                                ],
                                Array [
                                  "int",
                                  "1",
                                ],
                              ],
                              Array [
                                0,
                                "bar",
                                "Failed",
                                Array [
                                  "int",
                                  "2",
                                ],
                                Array [
                                  "int",
                                  "5",
                                ],
                              ],
                              Array [
                                0,
                                "extra-key",
                                "Failed",
                                Array [
                                  null,
                                  "ABSENT",
                                ],
                                Array [
                                  "int",
                                  "10",
                                ],
                              ],
                            ]
          }
          setRowData={[Function]}
          sortTypeList={
                    Array [
                              1,
                              2,
                              3,
                              4,
                            ]
          }
/>,
        "columnDefs": Array [
          Object {
            "field": "descriptor",
            "headerName": "Descriptor",
            "hide": true,
          },
          Object {
            "cellRendererFramework": [Function],
            "cellStyle": [Function],
            "field": "key",
            "headerName": "Key",
            "pinned": "left",
            "suppressMovable": true,
          },
          Object {
            "cellRendererFramework": [Function],
            "cellStyle": [Function],
            "field": "expected",
            "headerName": "Expected",
          },
          Object {
            "cellRendererFramework": [Function],
            "cellStyle": [Function],
            "field": "value",
            "headerName": "Value",
          },
        ],
        "rowData": Array [
          Object {
            "descriptor": Object {
              "indent": 0,
              "isEmptyLine": false,
              "isListKey": false,
              "lineNo": 524,
              "status": "Failed",
            },
            "expected": Object {
              "type": "int",
              "value": "5",
            },
            "key": Object {
              "type": "key",
              "value": "bar",
            },
            "value": Object {
              "type": "int",
              "value": "2",
            },
          },
          Object {
            "descriptor": Object {
              "indent": 0,
              "isEmptyLine": false,
              "isListKey": false,
              "lineNo": 524,
              "status": "Failed",
            },
            "expected": Object {
              "type": "int",
              "value": "10",
            },
            "key": Object {
              "type": "key",
              "value": "extra-key",
            },
            "value": Object {
              "type": null,
              "value": "ABSENT",
            },
          },
          Object {
            "descriptor": Object {
              "indent": 0,
              "isEmptyLine": false,
              "isListKey": undefined,
              "lineNo": 524,
              "status": "Passed",
            },
            "expected": Object {
              "type": "int",
              "value": "1",
            },
            "key": Object {
              "type": "key",
              "value": "foo",
            },
            "value": Object {
              "type": "int",
              "value": "1",
            },
          },
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
